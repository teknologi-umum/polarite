name: Deploy

on:
  push:
    branches:
      - master

jobs:
  ci:
    name: CI
    runs-on: ubuntu-latest
    timeout-minutes: 15
    container: golang:1.19-bullseye
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Build
        run: go build .

      - name: Run test & coverage
        run: go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
        env:
          ENVIRONMENT: development
          PORT: 3000
          TZ: UTC

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1
        with:
          languages: go

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

      - uses: codecov/codecov-action@v3
  cd:
    name: CD
    needs: ci
    runs-on: ubuntu-latest
    container: debian:bullseye
    timeout-minutes: 120
    steps:
      - name: Install required packages
        run: apt-get update && apt-get upgrade -y && apt-get install -y tar gzip curl ssh

      - name: Register SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY }}
          name: id_ed25519
          known_hosts: ${{ secrets.SSH_IP }}
          if_key_exists: replace

      - name: SSH Keyscan
        run: ssh-keyscan -p ${{ secrets.SSH_PORT }} -H ${{ secrets.SSH_IP }} >> /root/.ssh/known_hosts

      - name: Pull latest code
        run: >
          ssh
          -i /root/.ssh/id_ed25519 
          -p ${{ secrets.SSH_PORT }}
          -t ${{ secrets.SSH_USER }}@${{ secrets.SSH_IP }} 
          'ssh polarite "cd ${{ secrets.SSH_WORKDIR }}/polarite && git pull" '

      - name: Build Docker images
        run: >
          ssh 
          -i /root/.ssh/id_ed25519
          -p ${{ secrets.SSH_PORT }}
          -t ${{ secrets.SSH_USER }}@${{ secrets.SSH_IP }}
          "ssh polarite 'echo ${{ secrets.SSH_PASSWORD }} | sudo -S bash -c '\"'cd ${{ secrets.SSH_WORKDIR }}/polarite &&
          docker compose up -d --build'\"' ' "

      - name: Clean up docker artifacts
        run: >
          ssh 
          -i /root/.ssh/id_ed25519
          -p ${{ secrets.SSH_PORT }}
          -t ${{ secrets.SSH_USER }}@${{ secrets.SSH_IP }}
          "ssh polarite 'echo ${{ secrets.SSH_PASSWORD }} | sudo -S bash -c '\"'docker container prune -f &&
          docker image prune -f &&
          docker builder prune -f '\"' ' "

      - name: Create Sentry release
        uses: getsentry/action-release@v1
        env:
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_TOKEN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
        with:
          environment: production
          set_commits: skip
          version: ${{ github.sha }}

  release:
    name: Release
    needs: cd
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          flavor: |
            latest=false
          tags: |
            type=edge
            type=sha
          labels: |
            org.opencontainers.image.title=Polarite
            org.opencontainers.image.description=Polarite is a Pastebin alternative made for simplicity written in Go.
            org.opencontainers.image.authors=Teknologi Umum

      - name: Build and push Docker image
        uses: docker/build-push-action@v3
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
